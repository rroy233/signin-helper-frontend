{"remainingRequest":"/Users/Roy/Documents/开发/开发中/signin/Frontend/sign_in/node_modules/babel-loader/lib/index.js!/Users/Roy/Documents/开发/开发中/signin/Frontend/sign_in/node_modules/vuetify/lib/components/VInput/VInput.js","dependencies":[{"path":"/Users/Roy/Documents/开发/开发中/signin/Frontend/sign_in/node_modules/vuetify/lib/components/VInput/VInput.js","mtime":1634998434047},{"path":"/Users/Roy/Documents/开发/开发中/signin/Frontend/sign_in/babel.config.js","mtime":1636113456438},{"path":"/Users/Roy/Documents/开发/开发中/signin/Frontend/sign_in/node_modules/cache-loader/dist/cjs.js","mtime":1630043765451},{"path":"/Users/Roy/Documents/开发/开发中/signin/Frontend/sign_in/node_modules/babel-loader/lib/index.js","mtime":1634886029486}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}