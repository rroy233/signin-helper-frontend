{"remainingRequest":"/Users/Roy/Documents/开发/开发中/signin/Frontend/sign_in/node_modules/thread-loader/dist/cjs.js!/Users/Roy/Documents/开发/开发中/signin/Frontend/sign_in/node_modules/babel-loader/lib/index.js!/Users/Roy/Documents/开发/开发中/signin/Frontend/sign_in/node_modules/vuetify/lib/components/VSlideGroup/VSlideGroup.js","dependencies":[{"path":"/Users/Roy/Documents/开发/开发中/signin/Frontend/sign_in/node_modules/vuetify/lib/components/VSlideGroup/VSlideGroup.js","mtime":1648128542500},{"path":"/Users/Roy/Documents/开发/开发中/signin/Frontend/sign_in/babel.config.js","mtime":1636113456438},{"path":"/Users/Roy/Documents/开发/开发中/signin/Frontend/sign_in/node_modules/cache-loader/dist/cjs.js","mtime":1648128532195},{"path":"/Users/Roy/Documents/开发/开发中/signin/Frontend/sign_in/node_modules/thread-loader/dist/cjs.js","mtime":1648128532006},{"path":"/Users/Roy/Documents/开发/开发中/signin/Frontend/sign_in/node_modules/babel-loader/lib/index.js","mtime":1648128535778}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}