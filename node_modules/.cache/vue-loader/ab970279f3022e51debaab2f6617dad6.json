{"remainingRequest":"/Users/Roy/Documents/开发/1.已上线/signin/Frontend/sign_in/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Roy/Documents/开发/1.已上线/signin/Frontend/sign_in/src/components/Admin/Index.vue?vue&type=template&id=4087fba2&","dependencies":[{"path":"/Users/Roy/Documents/开发/1.已上线/signin/Frontend/sign_in/src/components/Admin/Index.vue","mtime":1663650869575},{"path":"/Users/Roy/Documents/开发/1.已上线/signin/Frontend/sign_in/node_modules/cache-loader/dist/cjs.js","mtime":1648128532195},{"path":"/Users/Roy/Documents/开发/1.已上线/signin/Frontend/sign_in/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1648128535950},{"path":"/Users/Roy/Documents/开发/1.已上线/signin/Frontend/sign_in/node_modules/cache-loader/dist/cjs.js","mtime":1648128532195},{"path":"/Users/Roy/Documents/开发/1.已上线/signin/Frontend/sign_in/node_modules/vue-loader/lib/index.js","mtime":1648128535013}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPHYtYXBwIGlkPSJpbnNwaXJlIj4KICAgIDx2LWFwcC1iYXIgYXBwPgogICAgICA8di10b29sYmFyLXRpdGxlPueuoeeQhuWRmOmdouadvzwvdi10b29sYmFyLXRpdGxlPgogICAgPC92LWFwcC1iYXI+CgogICAgPHYtbWFpbj4KICAgICAgPHYtY29udGFpbmVyPgogICAgICAgIDwhLS0gIC0tPgogICAgICAgIDx2LWFsZXJ0IGNsYXNzPSJtYS0yIiB0ZXh0IGNvbG9yPSJpbmZvIj4KICAgICAgICAgIDxoMyBjbGFzcz0idGV4dC1oNSI+566h55CG5ZGY5oKo5aW9PC9oMz4KICAgICAgICAgIDxkaXY+5aaC5p6c6YGH5Yiw5LuA5LmI6Zeu6aKY5Y+v5Lul6IGU57O7UVE6Mjg2Nzk4NDYxODwvZGl2PgogICAgICAgICAgPGRpdj7ns7vnu5/njrDlt7LmlK/mjIHlpJrku7vliqHlubbooYzvvIzmgqjlj6/ku6XlnKjlj5HluIPlpJrkuKrnrb7liLDmtLvliqjkuobjgII8L2Rpdj4KCiAgICAgICAgICA8di1kaXZpZGVyIGNsYXNzPSJteS00IGluZm8iIHN0eWxlPSJvcGFjaXR5OiAwLjIyIj48L3YtZGl2aWRlcj4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJ2LXRleHQtYm9keS0xIj4KICAgICAgICAgICAg5oKo5b2T5YmN5omA566h55CG55qE54+t57qn5ZCN56ew5Li6PGNvZGU+e3sgY2xhc3NfaW5mby5jbGFzc19uYW1lIH19PC9jb2RlCiAgICAgICAgICAgID7jgIIg5paw5ZCM5a2m5Y+v5Lul5L2/55So54+t57qn5Luj56CBPGNvZGU+e3sgY2xhc3NfaW5mby5jbGFzc19jb2RlIH19PC9jb2RlCiAgICAgICAgICAgID7liqDlhaXjgIIKICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdi1hbGVydD4KCiAgICAgICAgPCEtLSDoj5zljZXlvIDlp4sgLS0+CiAgICAgICAgPHYtbGlzdC1pdGVtLWdyb3VwIGNvbG9yPSJwcmltYXJ5IiBjbGFzcz0ibWEtMiI+CiAgICAgICAgICA8di1saXN0LWl0ZW0gQGNsaWNrPSJlZGl0X2NsYXNzIiBsaW5rPgogICAgICAgICAgICA8di1saXN0LWl0ZW0taWNvbj4KICAgICAgICAgICAgICA8di1pY29uPm1kaS1nb29nbGUtY2xhc3Nyb29tPC92LWljb24+CiAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0taWNvbj4KICAgICAgICAgICAgPHYtbGlzdC1pdGVtLWNvbnRlbnQ+CiAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlPuS/ruaUueePree6p+S/oeaBrzwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tY29udGVudD4KICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CgogICAgICAgICAgPHYtbGlzdC1pdGVtIEBjbGljaz0ic2hvd19hY3RfbGlzdCIgbGluaz4KICAgICAgICAgICAgPHYtbGlzdC1pdGVtLWljb24+CiAgICAgICAgICAgICAgPHYtaWNvbj5tZGktY2FsZW5kYXItc2VhcmNoPC92LWljb24+CiAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0taWNvbj4KICAgICAgICAgICAgPHYtbGlzdC1pdGVtLWNvbnRlbnQ+CiAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlPua0u+WKqOeuoeeQhjwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tY29udGVudD4KICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CgogICAgICAgICAgPHYtbGlzdC1pdGVtIEBjbGljaz0ic2hvd191c2VyX2xpc3QiIGxpbms+CiAgICAgICAgICAgIDx2LWxpc3QtaXRlbS1pY29uPgogICAgICAgICAgICAgIDx2LWljb24+bWRpLWFjY291bnQtY29nLW91dGxpbmU8L3YtaWNvbj4KICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1pY29uPgogICAgICAgICAgICA8di1saXN0LWl0ZW0tY29udGVudD4KICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGU+54+t57qn5oiQ5ZGY566h55CGPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1jb250ZW50PgogICAgICAgICAgPC92LWxpc3QtaXRlbT4KCiAgICAgICAgICA8di1kaXZpZGVyPjwvdi1kaXZpZGVyPgoKICAgICAgICAgIDx2LWxpc3QtaXRlbSB0bz0iL3VzZXIiIGxpbms+CiAgICAgICAgICAgIDx2LWxpc3QtaXRlbS1pY29uPgogICAgICAgICAgICAgIDx2LWljb24+bWRpLWtleWJvYXJkLXJldHVybjwvdi1pY29uPgogICAgICAgICAgICA8L3YtbGlzdC1pdGVtLWljb24+CiAgICAgICAgICAgIDx2LWxpc3QtaXRlbS1jb250ZW50PgogICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZT7ov5Tlm57nlKjmiLfnq688L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICA8L3YtbGlzdC1pdGVtLWNvbnRlbnQ+CiAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgIDwvdi1saXN0LWl0ZW0tZ3JvdXA+CiAgICAgICAgPCEtLSDoj5zljZXnu5PmnZ8gLS0+CiAgICAgIDwvdi1jb250YWluZXI+CgogICAgICA8IS0tIOaPkOekuuahhiAtLT4KICAgICAgPHYtZGlhbG9nIHYtbW9kZWw9ImRpYWxvZy5vcGVuIiBtYXgtd2lkdGg9IjQ1MHB4Ij4KICAgICAgICA8di1jYXJkPgogICAgICAgICAgPHYtY2FyZC10aXRsZT57eyBkaWFsb2cudGl0bGUgfX08L3YtY2FyZC10aXRsZT4KICAgICAgICAgIDx2LWNhcmQtdGV4dD4KICAgICAgICAgICAge3sgZGlhbG9nLnRleHQgfX0KICAgICAgICAgIDwvdi1jYXJkLXRleHQ+CiAgICAgICAgICA8di1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgogICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICBjb2xvcj0iYmx1ZSBkYXJrZW4tMSIKICAgICAgICAgICAgICB0ZXh0CiAgICAgICAgICAgICAgQGNsaWNrPSJkaWFsb2cub3BlbiA9ICFkaWFsb2cub3BlbiIKICAgICAgICAgICAgICA+T0s8L3YtYnRuCiAgICAgICAgICAgID4KICAgICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgICAgPC92LWNhcmQ+CiAgICAgIDwvdi1kaWFsb2c+CgogICAgICA8IS0tIOe8lui+keePree6p+S/oeaBryAtLT4KICAgICAgPHYtZGlhbG9nIHYtbW9kZWw9ImVkaXRDbGFzc0RpYWxvZyIgbWF4LXdpZHRoPSI0NTBweCI+CiAgICAgICAgPHYtY2FyZD4KICAgICAgICAgIDx2LWNhcmQtdGl0bGU+57yW6L6R54+t57qn5L+h5oGvPC92LWNhcmQtdGl0bGU+CiAgICAgICAgICA8di1jYXJkLXRleHQ+CiAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICBsYWJlbD0i54+t57qn5ZCN56ewIgogICAgICAgICAgICAgIHYtbW9kZWw9ImNsYXNzX2VkaXQuY2xhc3NfbmFtZSIKICAgICAgICAgICAgICBvdXRsaW5lZAogICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICBsYWJlbD0i54+t57qn5Luj56CBIgogICAgICAgICAgICAgIHYtbW9kZWw9ImNsYXNzX2VkaXQuY2xhc3NfY29kZSIKICAgICAgICAgICAgICBvdXRsaW5lZAogICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgPHYtY2FyZC1hY3Rpb25zPgogICAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgY29sb3I9ImJsdWUgZGFya2VuLTEiCiAgICAgICAgICAgICAgdGV4dAogICAgICAgICAgICAgIEBjbGljaz0iZWRpdENsYXNzRGlhbG9nID0gIWVkaXRDbGFzc0RpYWxvZyIKICAgICAgICAgICAgICA+5Y+W5raIPC92LWJ0bgogICAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWJ0biBjb2xvcj0iYmx1ZSBkYXJrZW4tMSIgdGV4dCBAY2xpY2s9InNhdmVfY2xhc3MiPuS/neWtmDwvdi1idG4+CiAgICAgICAgICA8L3YtY2FyZC1hY3Rpb25zPgogICAgICAgIDwvdi1jYXJkPgogICAgICA8L3YtZGlhbG9nPgoKICAgICAgPCEtLSDliqDovb3moYYgLS0+CiAgICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJsb2FkaW5nX2RpYWxvZyIgaGlkZS1vdmVybGF5IHBlcnNpc3RlbnQgd2lkdGg9IjMwMCI+CiAgICAgICAgPHYtY2FyZCBjb2xvcj0id2hpdGUiIGRhcms+CiAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9Im10LTEgcHJpbWFyeS0tdGV4dCI+CiAgICAgICAgICAgIOWKoOi9veS4rQogICAgICAgICAgICA8di1wcm9ncmVzcy1saW5lYXIKICAgICAgICAgICAgICBpbmRldGVybWluYXRlCiAgICAgICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgICAgY2xhc3M9Im1iLTAiCiAgICAgICAgICAgID48L3YtcHJvZ3Jlc3MtbGluZWFyPgogICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICA8L3YtY2FyZD4KICAgICAgPC92LWRpYWxvZz4KCiAgICAgIDwhLS0g5rS75Yqo5YiX6KGoIC0tPgogICAgICA8di1kaWFsb2cKICAgICAgICB2LW1vZGVsPSJhY3RfbGlzdF9kaWFsb2ciCiAgICAgICAgZnVsbHNjcmVlbgogICAgICAgIGhpZGUtb3ZlcmxheQogICAgICAgIHRyYW5zaXRpb249ImRpYWxvZy1ib3R0b20tdHJhbnNpdGlvbiIKICAgICAgPgogICAgICAgIDx2LWNhcmQ+CiAgICAgICAgICA8di10b29sYmFyIGNvbG9yPSJjeWFuIiBkYXJrIGZsYXQ+CiAgICAgICAgICAgIDx2LWJ0biBpY29uIGRhcmsgQGNsaWNrPSJhY3RfbGlzdF9kaWFsb2cgPSBmYWxzZSI+CiAgICAgICAgICAgICAgPHYtaWNvbj5tZGktY2xvc2U8L3YtaWNvbj4KICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgPHYtdG9vbGJhci10aXRsZT7mtLvliqjnrqHnkIY8L3YtdG9vbGJhci10aXRsZT4KICAgICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICAgIDx2LWJ0biBkZXByZXNzZWQgY29sb3I9ImN5YW4gZGFya2VuLTIiIEBjbGljaz0ibmV3X2FjdCI+CiAgICAgICAgICAgICAg5paw5bu65rS75YqoCiAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6ZXh0ZW5zaW9uPgogICAgICAgICAgICAgIDx2LXRhYnMgdi1tb2RlbD0iYWN0X2xpc3RfdGFiIiBhbGlnbi13aXRoLXRpdGxlPgogICAgICAgICAgICAgICAgPHYtdGFicy1zbGlkZXIgY29sb3I9InllbGxvdyI+PC92LXRhYnMtc2xpZGVyPgogICAgICAgICAgICAgICAgPHYtdGFiPgogICAgICAgICAgICAgICAgICA8di1iYWRnZSBjb2xvcj0icGluayIgZG90IHYtaWY9ImFjdF9saXN0LmFjdGl2ZV9udW0gIT0gMCI+CiAgICAgICAgICAgICAgICAgICAg5b2T5YmN5rS75YqoCiAgICAgICAgICAgICAgICAgIDwvdi1iYWRnZT4KICAgICAgICAgICAgICAgICAge3sgYWN0X2xpc3QuYWN0aXZlX251bSA9PSAwID8gIuW9k+WJjea0u+WKqCIgOiAiIiB9fQogICAgICAgICAgICAgICAgPC92LXRhYj4KICAgICAgICAgICAgICAgIDx2LXRhYj4g5Y6G5Y+y5rS75YqoIDwvdi10YWI+CiAgICAgICAgICAgICAgICA8di10YWItaXRlbT4KICAgICAgICAgICAgICAgICAgPHYtY2FyZD4KICAgICAgICAgICAgICAgICAgICA8di1jb250YWluZXI+CiAgICAgICAgICAgICAgICAgICAgICA8IS0tIOW9k+WJjea0u+WKqCAtLT4KICAgICAgICAgICAgICAgICAgICAgIDx2LWxpc3QgdGhyZWUtbGluZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gYWN0X2xpc3QuYWN0aXZlX2xpc3QiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0gOmtleT0iaW5kZXgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLWF2YXRhcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktY2FsZW5kYXItY3Vyc29yPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLWF2YXRhcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS1jb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGU+e3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLm5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX08L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tc3VidGl0bGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+5Yib5bu65pe26Ze0e3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uYmVnaW5fdGltZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19PC92LWxpc3QtaXRlbS1zdWJ0aXRsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS1zdWJ0aXRsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID7miKrmraLml7bpl7R7ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lbmRfdGltZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19PC92LWxpc3QtaXRlbS1zdWJ0aXRsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tYWN0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gZGVwcmVzc2VkIEBjbGljaz0iZWRpdF9hY3QoaXRlbSkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOe8lui+kQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1hY3Rpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tYWN0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gZGVwcmVzc2VkIEBjbGljaz0iZ2V0X3N0cyhpdGVtKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg5pWw5o2uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiB2LWlmPSJpdGVtLnR5cGUgPT0gMSIgc21hbGwgcmlnaHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5tZGktY2xvdWQtY2hlY2stb3V0bGluZTwvdi1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tYWN0aW9uLXRleHQgY2xhc3M9InRleHQtY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID7liJvlu7rkuro6e3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY3JlYXRlX2J5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX08L3YtbGlzdC1pdGVtLWFjdGlvbi10ZXh0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tYWN0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgICAgICAgICAgICAgIDwhLS0g5b2T5YmN5rS75YqoIC0tPgogICAgICAgICAgICAgICAgICAgIDwvdi1jb250YWluZXI+CiAgICAgICAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICAgICAgPC92LXRhYi1pdGVtPgogICAgICAgICAgICAgICAgPHYtdGFiLWl0ZW0+CiAgICAgICAgICAgICAgICAgIDx2LWNhcmQ+CiAgICAgICAgICAgICAgICAgICAgPCEtLSDljoblj7LmtLvliqggLS0+CiAgICAgICAgICAgICAgICAgICAgPHYtbGlzdCB0aHJlZS1saW5lPgogICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlCiAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIGFjdF9saXN0Lmhpc3RvcnlfbGlzdCIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtIDprZXk9ImluZGV4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tYXZhdGFyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktY2FsZW5kYXItbG9jazwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tYXZhdGFyPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS1jb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaHRtbD0iaXRlbS5uYW1lIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tc3VidGl0bGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPuWIm+W7uuaXtumXtHt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5iZWdpbl90aW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19PC92LWxpc3QtaXRlbS1zdWJ0aXRsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXN1YnRpdGxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID7miKrmraLml7bpl7R7ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZW5kX3RpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX08L3YtbGlzdC1pdGVtLXN1YnRpdGxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1jb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS1hY3Rpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gZGVwcmVzc2VkIEBjbGljaz0iZWRpdF9hY3QoaXRlbSkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICDnvJbovpEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1hY3Rpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLWFjdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biBkZXByZXNzZWQgQGNsaWNrPSJnZXRfc3RzKGl0ZW0pIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg5pWw5o2uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24gdi1pZj0iaXRlbS50eXBlID09IDEiIHNtYWxsIHJpZ2h0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPm1kaS1jbG91ZC1jaGVjay1vdXRsaW5lPC92LWljb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS1hY3Rpb24tdGV4dCBjbGFzcz0idGV4dC1jZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID7liJvlu7rkuro6e3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNyZWF0ZV9ieQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fTwvdi1saXN0LWl0ZW0tYWN0aW9uLXRleHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLWFjdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICAgICAgICAgICAgPCEtLSDljoblj7LmtLvliqggLS0+CiAgICAgICAgICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgICAgICAgICAgPC92LXRhYi1pdGVtPgogICAgICAgICAgICAgIDwvdi10YWJzPgogICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgPC92LXRvb2xiYXI+CiAgICAgICAgPC92LWNhcmQ+CiAgICAgIDwvdi1kaWFsb2c+CgogICAgICA8IS0tIOe8lui+kea0u+WKqOS/oeaBryAtLT4KICAgICAgPHYtZGlhbG9nCiAgICAgICAgdi1tb2RlbD0iYWN0X2RpYWxvZyIKICAgICAgICBmdWxsc2NyZWVuCiAgICAgICAgaGlkZS1vdmVybGF5CiAgICAgICAgdHJhbnNpdGlvbj0iZGlhbG9nLWJvdHRvbS10cmFuc2l0aW9uIgogICAgICA+CiAgICAgICAgPHYtY2FyZD4KICAgICAgICAgIDx2LXRvb2xiYXIgZGFyayBjb2xvcj0icHJpbWFyeSI+CiAgICAgICAgICAgIDx2LWJ0biBpY29uIGRhcmsgQGNsaWNrPSJhY3RfZGlhbG9nID0gZmFsc2UiPgogICAgICAgICAgICAgIDx2LWljb24+bWRpLWNsb3NlPC92LWljb24+CiAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgIDx2LXRvb2xiYXItdGl0bGU+e3sKICAgICAgICAgICAgICBhY3RfZWRpdF9tb2RlID09ICJuZXciID8gIvCfjJ/mlrDlu7rmtLvliqgiIDogIvCfk53nvJbovpHlvZPliY3mtLvliqgiCiAgICAgICAgICAgIH19PC92LXRvb2xiYXItdGl0bGU+CiAgICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgoKICAgICAgICAgICAgPHYtdG9vbGJhci1pdGVtcz4KICAgICAgICAgICAgICA8di1idG4gZGFyayB0ZXh0IEBjbGljaz0ic2F2ZV9hY3QiPiDkv53lrZggPC92LWJ0bj4KICAgICAgICAgICAgPC92LXRvb2xiYXItaXRlbXM+CiAgICAgICAgICA8L3YtdG9vbGJhcj4KCiAgICAgICAgICA8IS0tIOe8lui+keWMuuW8gOWniyAtLT4KICAgICAgICAgIDx2LWNvbnRhaW5lcj4KICAgICAgICAgICAgPHYtYWxlcnQKICAgICAgICAgICAgICBkZW5zZQogICAgICAgICAgICAgIHR5cGU9ImluZm8iCiAgICAgICAgICAgICAgaWNvbj0ibWRpLWZvbGRlci1wbHVzLW91dGxpbmUiCiAgICAgICAgICAgICAgdi1pZj0iYWN0X2VkaXRfbW9kZSA9PSAnbmV3JyIKICAgICAgICAgICAgICBjbGFzcz0ibXQtMiBtYi00IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAg6K+35q2j56Gu5aGr5YaZ57uT5p2f5pel5pyf77yM5rS75Yqo54q25oCB5Lya5Zyo5Yiw5pyf5ZCO6Ieq5Yqo5Y+Y5pu044CCCiAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAg5bu66K6u566h55CG5ZGY5Li65q+P5LiA5Liq5rS75Yqo6YO96YCJ5oup5LiN5ZCM55qE6YWN5Zu+77yM5L6/5LqO5Yy65YiG44CCCiAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAg5L+d5a2Y5LmL5ZCO77yM5rS75Yqo5Y2z5byA5aeL77yM57O757uf5bCG5ZCR54+t57qn5YaF5q+P5LiA5L2N5ZCM5a2m5Y+R6YCB6YCa55+l44CCCiAgICAgICAgICAgIDwvdi1hbGVydD4KICAgICAgICAgICAgPHYtYWxlcnQKICAgICAgICAgICAgICBkZW5zZQogICAgICAgICAgICAgIGNvbG9yPSIjMkEzQjREIgogICAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgICBpY29uPSJtZGktY2FsZW5kYXItZWRpdCIKICAgICAgICAgICAgICB2LWlmPSJhY3RfZWRpdF9tb2RlID09ICdlZGl0JyIKICAgICAgICAgICAgICBjbGFzcz0ibXQtMiBtYi00IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAg6Iul5oKo5o+Q5YmN5YWz6Zet5q2k5rS75Yqo77yM5oiR5Lus5bCG6Ieq5Yqo5Li65oKo6K6+572u57uT5p2f5pe26Ze044CCCiAgICAgICAgICAgIDwvdi1hbGVydD4KCiAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICBsYWJlbD0i5rS75Yqo5ZCN56ewIgogICAgICAgICAgICAgIHYtbW9kZWw9ImFjdF9pbmZvLm5hbWUiCiAgICAgICAgICAgICAgOnJ1bGVzPSJuYW1lX3J1bGUiCiAgICAgICAgICAgICAgaGludD0i5bu66K6u5LiN6KaB5LiO6L+H5Y6755qE6YeN5aSN77yM5Y+v5Lul5pivOuesrHjlkah4eHh4IgogICAgICAgICAgICAgIG91dGxpbmVkCiAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KCiAgICAgICAgICAgIDx2LXN3aXRjaAogICAgICAgICAgICAgIHYtbW9kZWw9ImFjdF9pbmZvLmFjdGl2ZSIKICAgICAgICAgICAgICB2LWlmPSJhY3RfZWRpdF9tb2RlID09ICdlZGl0JyIKICAgICAgICAgICAgICBpbnNldAogICAgICAgICAgICAgIGxhYmVsPSLmmK/lkKblkK/nlKjmtLvliqgiCiAgICAgICAgICAgICAgY2xhc3M9Im15LTAiCiAgICAgICAgICAgID48L3Ytc3dpdGNoPgoKICAgICAgICAgICAgPHYtc3dpdGNoCiAgICAgICAgICAgICAgdi1tb2RlbD0iYWN0X2luZm8ubmVlZF93YWl0IgogICAgICAgICAgICAgIGluc2V0CiAgICAgICAgICAgICAgbGFiZWw9IuaYr+WQpumihOe6puW8gOWQryIKICAgICAgICAgICAgICBjbGFzcz0ibXktMCIKICAgICAgICAgICAgPjwvdi1zd2l0Y2g+CgogICAgICAgICAgICA8di1zd2l0Y2gKICAgICAgICAgICAgICB2LW1vZGVsPSJhY3RfaW5mby5kYWlseV9ub3RpZnkiCiAgICAgICAgICAgICAgaW5zZXQKICAgICAgICAgICAgICBsYWJlbD0i5piv5ZCm5ZCv55So5q+P5pel5o+Q6YaSIgogICAgICAgICAgICAgIGNsYXNzPSJteS0wIgogICAgICAgICAgICA+PC92LXN3aXRjaD4KCiAgICAgICAgICAgIDx2LXRleHRhcmVhCiAgICAgICAgICAgICAgbGFiZWw9Iua0u+WKqOWFrOWRiiIKICAgICAgICAgICAgICB2LW1vZGVsPSJhY3RfaW5mby5hbm5vdW5jZW1lbnQiCiAgICAgICAgICAgICAgOnJ1bGVzPSJhbm5vdW5jZW1lbnRfcnVsZSIKICAgICAgICAgICAgICBvdXRsaW5lZAogICAgICAgICAgICA+PC92LXRleHRhcmVhPgoKICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgIGxhYmVsPSLlrozmiJDnrb7liLDmj5DnpLror60iCiAgICAgICAgICAgICAgdi1tb2RlbD0iYWN0X2luZm8uY2hlZXJfdGV4dCIKICAgICAgICAgICAgICA6cnVsZXM9ImNoZWVyVGV4dF9ydWxlIgogICAgICAgICAgICAgIG91dGxpbmVkCiAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtb3ZlcmxpbmUiPuWktOWbvuiuvue9rjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWJvZHktMSBtYi0zIj4KICAgICAgICAgICAgICDmiJHku6zlhYHorrjmgqjkuKrmgKfljJborr7nva7nrb7liLDljaHniYfnmoTog4zmma/lm77niYfvvIzlpoLmnpzmgqjopoHkvb/nlKjpu5jorqTlm77niYfnmoTor53vvIzkuIvmlrnovpPlhaXmoYbor7cKICAgICAgICAgICAgICA8Y29kZT7nlZnnqbo8L2NvZGU+44CCCiAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAg5aaC5p6c6ZyA6KaB6Ieq5a6a5LmJ5Zu+54mH77yM6K+35YmN5b6APGEKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vc20ubXMiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgICAgICAgID5TTS5NUzwvYQogICAgICAgICAgICAgID7kuIrkvKDlm77niYfvvIzlnKjkuIvmlrnloavlhaXlm77niYfnmoTlnLDlnYDvvIzkv53lrZjlkI7lsIboh6rliqjovazmjaLkuLrliqDlr4blnLDlnYDjgIIKICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICDkvb/nlKjjgIzpmo/mnLrlm77niYfjgI3lip/og73ns7vnu5/lsIbku45QaXhpdumaj+acuuaKk+WPluWbvueJh++8jOS4i+aWueWwhuiHquWKqOWhq+WFpSLpooTop4jlnLDlnYAi77yM5L+d5a2Y5rS75Yqo5ZCO5Zu+54mH5Zyw5Z2A5bCG6L2s5Li65Yqg5a+GIuawuOS5heWcsOWdgCLvvIzlm77niYfmnInmlYjmnJ85MOWkqeOAggogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBmbGV4LXdyYXAiPgogICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgIGxhYmVsPSLlpLTlm77lnLDlnYAiCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJhY3RfaW5mby5waWMiCiAgICAgICAgICAgICAgICBvdXRsaW5lZAogICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgIGRlcHJlc3NlZAogICAgICAgICAgICAgICAgbGFyZ2UKICAgICAgICAgICAgICAgIDpsb2FkaW5nPSJnZXRfcmRfcGljX2J0bl9sb2FkaW5nIgogICAgICAgICAgICAgICAgQGNsaWNrPSJnZXRfcmFuZG9tX3BpYyIKICAgICAgICAgICAgICAgIGNsYXNzPSJtYS0zIgogICAgICAgICAgICAgICAgPumaj+acuuWbvueJhzwvdi1idG4KICAgICAgICAgICAgICA+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPCEtLSDpooTop4ggLS0+CiAgICAgICAgICAgIDx2LWNvbnRhaW5lcj4KICAgICAgICAgICAgICA8di1jYXJkIGNsYXNzPSJteC1hdXRvIiBtYXgtd2lkdGg9IjQ1MCI+CiAgICAgICAgICAgICAgICA8di1pbWcKICAgICAgICAgICAgICAgICAgY2xhc3M9IndoaXRlLS10ZXh0IGFsaWduLWVuZCIKICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIyMDBweCIKICAgICAgICAgICAgICAgICAgOnNyYz0iaW1nX3ByZXZpZXciCiAgICAgICAgICAgICAgICAgIGdyYWRpZW50PSJ0byB0b3AgcmlnaHQsIHJnYmEoMCwwLDAsLjcpLCByZ2JhKDI0MCwyNTUsMjU1LC4zKSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHYtY2FyZC10aXRsZSBjbGFzcz0iZm9udC13ZWlnaHQtYmxhY2siPgogICAgICAgICAgICAgICAgICAgIHt7IGFjdF9pbmZvLm5hbWUgfX0KICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGl0bGU+CiAgICAgICAgICAgICAgICAgIDx2LWNhcmQtc3VidGl0bGUgY2xhc3M9InRleHQtY2FwdGlvbiI+CiAgICAgICAgICAgICAgICAgICAg6L+Y5pyJeHh4562JeOWQjeWQjOWtpuacquWujOaIkAogICAgICAgICAgICAgICAgICA8L3YtY2FyZC1zdWJ0aXRsZT4KICAgICAgICAgICAgICAgIDwvdi1pbWc+CgogICAgICAgICAgICAgICAgPHYtY2FyZC1zdWJ0aXRsZSBjbGFzcz0icGItMCI+IOmihOiniOWNoeeJhyA8L3YtY2FyZC1zdWJ0aXRsZT4KCiAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQgY2xhc3M9InRleHQtLXByaW1hcnkgcHQtNSI+CiAgICAgICAgICAgICAgICAgIDxkaXY+e3sgYWN0X2luZm8uYW5ub3VuY2VtZW50IH19PC9kaXY+CiAgICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgoKICAgICAgICAgICAgICAgIDx2LWNhcmQtYWN0aW9ucz4KICAgICAgICAgICAgICAgICAgPHYtYnRuIGNvbG9yPSJvcmFuZ2UiIGxhcmdlIHRleHQ+CiAgICAgICAgICAgICAgICAgICAg562+5YiwCiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiByaWdodCBkYXJrIHYtaWY9ImFjdF9pbmZvLnVwbG9hZC5lbmFibGVkIj4KICAgICAgICAgICAgICAgICAgICAgIG1kaS1jbG91ZC11cGxvYWQKICAgICAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgPHYtYnRuIGNvbG9yPSJwcmltYXJ5IiBsYXJnZSB0ZXh0PiDlrozmiJDmg4XlhrUgPC92LWJ0bj4KICAgICAgICAgICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgICAgIDwvdi1jb250YWluZXI+CiAgICAgICAgICAgIDwhLS0g6aKE6KeI57uT5p2fIC0tPgoKICAgICAgICAgICAgPCEtLSDkuIrkvKDorr7nva4gLS0+CiAgICAgICAgICAgIDx2LWNhcmQgdi1pZj0iYWN0X2VkaXRfbW9kZSA9PSAnbmV3JyIgY2xhc3M9Im15LTMiPgogICAgICAgICAgICAgIDx2LWNhcmQtdGl0bGU+5paH5Lu25LiK5Lyg6K6+572uPC92LWNhcmQtdGl0bGU+CiAgICAgICAgICAgICAgPHYtY2FyZC1zdWJ0aXRsZT4KICAgICAgICAgICAgICAgIOezu+e7n+m7mOiupOS8muWwhueUqOaIt+S4iuS8oOeahOaWh+S7tuWQjeaUueS4uueUqOaIt+eahOWnk+WQje+8jOWmguaenOmcgOimgeS/neeVmeWOn+aWh+S7tuWQje+8jOivt+WFs+mXreKAnOS4iuS8oOWQjumHjeaWsOWRveWQjeKAneW8gOWFs+OAggogICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICDnlKjmiLfkuIrkvKDnmoTmlofku7blsIblnKjmnI3liqHlmajlrZjlgqgzMOWkqe+8jOi/h+acn+WIoOmZpO+8jOivt+euoeeQhuWRmOWPiuaXtuWvvOWHuuOAggogICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICDmtLvliqjkuIDml6blj5HluIPlsIbml6Dms5Xmm7TmlLnkuIvliJforr7nva4hCiAgICAgICAgICAgICAgPC92LWNhcmQtc3VidGl0bGU+CiAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtc3dpdGNoCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImFjdF9pbmZvLnVwbG9hZC5lbmFibGVkIgogICAgICAgICAgICAgICAgICBpbnNldAogICAgICAgICAgICAgICAgICBsYWJlbD0i5piv5ZCm6ZyA6KaB5LiK5Lyg5paH5Lu2IgogICAgICAgICAgICAgICAgPjwvdi1zd2l0Y2g+CiAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgICA8di1jYXJkLXRleHQgdi1pZj0iYWN0X2luZm8udXBsb2FkLmVuYWJsZWQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1zdWJ0aXRsZS0yIj7mlofku7bnsbvlnoso5Y+v5aSa6YCJKe+8mjwvZGl2PgogICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMTIiIGNsYXNzPSJkLWZsZXgganVzdGlmeS1zdGFydCBmbGV4LXdyYXAiPgogICAgICAgICAgICAgICAgICAgIDx2LWNoZWNrYm94CiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJhY3RfaW5mby51cGxvYWQudHlwZSIKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSLlm77niYfmlofku7YocG5nLGpwZykiCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iaW1hZ2UiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWEtMiIKICAgICAgICAgICAgICAgICAgICA+PC92LWNoZWNrYm94PgogICAgICAgICAgICAgICAgICAgIDx2LWNoZWNrYm94CiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJhY3RfaW5mby51cGxvYWQudHlwZSIKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSLljovnvKnljIUoemlwLHJhcikiCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iYXJjaGl2ZSIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtYS0yIgogICAgICAgICAgICAgICAgICAgID48L3YtY2hlY2tib3g+CiAgICAgICAgICAgICAgICAgICAgPHYtY2hlY2tib3gKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImFjdF9pbmZvLnVwbG9hZC50eXBlIgogICAgICAgICAgICAgICAgICAgICAgbGFiZWw9IldvcmTmlofmoaMoZG9jLGRvY3gpIgogICAgICAgICAgICAgICAgICAgICAgdmFsdWU9IndvcmQiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWEtMiIKICAgICAgICAgICAgICAgICAgICA+PC92LWNoZWNrYm94PgogICAgICAgICAgICAgICAgICAgIDx2LWNoZWNrYm94CiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJhY3RfaW5mby51cGxvYWQudHlwZSIKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJQb3dlclBvaW505ryU56S65paH5qGjKHBwdCxwcHR4KSIKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJwcHQiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWEtMiIKICAgICAgICAgICAgICAgICAgICA+PC92LWNoZWNrYm94PgogICAgICAgICAgICAgICAgICAgIDx2LWNoZWNrYm94CiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJhY3RfaW5mby51cGxvYWQudHlwZSIKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJFeGNlbOihqOagvCh4bHMseGxzeCkiCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0iZXhjZWwiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWEtMiIKICAgICAgICAgICAgICAgICAgICA+PC92LWNoZWNrYm94PgogICAgICAgICAgICAgICAgICAgIDx2LWNoZWNrYm94CiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJhY3RfaW5mby51cGxvYWQudHlwZSIKICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPSJQREbmlofmoaMocGRmKSIKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJwZGYiCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWEtMiIKICAgICAgICAgICAgICAgICAgICA+PC92LWNoZWNrYm94PgogICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgPC92LXJvdz4KCiAgICAgICAgICAgICAgICA8di1zbGlkZXIKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iYWN0X2luZm8udXBsb2FkLm1heF9zaXplIgogICAgICAgICAgICAgICAgICBsYWJlbD0i5Y2V5Liq5paH5Lu25aSn5bCP5LiN6LaF6L+HKE1CKSIKICAgICAgICAgICAgICAgICAgdGh1bWItY29sb3I9ImdyZWVuIGxpZ2h0ZW4tMSIKICAgICAgICAgICAgICAgICAgdGh1bWItbGFiZWw9ImFsd2F5cyIKICAgICAgICAgICAgICAgICAgbWF4PSIxMDAiCiAgICAgICAgICAgICAgICAgIG1pbj0iMSIKICAgICAgICAgICAgICAgID48L3Ytc2xpZGVyPgogICAgICAgICAgICAgICAgPHYtc3dpdGNoCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImFjdF9pbmZvLnVwbG9hZC5yZW5hbWUiCiAgICAgICAgICAgICAgICAgIGluc2V0CiAgICAgICAgICAgICAgICAgIGxhYmVsPSLkuIrkvKDlkI7ph43mlrDlkb3lkI0iCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJteS0wIgogICAgICAgICAgICAgICAgPjwvdi1zd2l0Y2g+CiAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgICAgIDx2LWNhcmQKICAgICAgICAgICAgICB2LWlmPSIKICAgICAgICAgICAgICAgIGFjdF9lZGl0X21vZGUgPT0gJ2VkaXQnICYmIGFjdF9pbmZvLnVwbG9hZC5lbmFibGVkID09IHRydWUKICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgY2xhc3M9Im15LTMiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1jYXJkLXRpdGxlPuaWh+S7tuS4iuS8oOiuvue9rua1j+iniDwvdi1jYXJkLXRpdGxlPgogICAgICAgICAgICAgIDx2LWNhcmQtdGV4dD4KICAgICAgICAgICAgICAgIDx2LXJvdyBjbGFzcz0iZC1mbGV4IGZsZXgtd3JhcCI+CiAgICAgICAgICAgICAgICAgIDx2LWNvbAogICAgICAgICAgICAgICAgICAgID48ZGl2IGNsYXNzPSJ0ZXh0LXN1YnRpdGxlLTIiPuaWh+S7tuexu+Wei++8mjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDx2LWNoaXAKICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaSkgaW4gYWN0X2luZm8udXBsb2FkLnR5cGUiCiAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1hLTIiCiAgICAgICAgICAgICAgICAgICAgICBsYWJlbAogICAgICAgICAgICAgICAgICAgICAgPnt7IGl0ZW0gfX08L3YtY2hpcAogICAgICAgICAgICAgICAgICAgID48L3YtY29sCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHYtY29sCiAgICAgICAgICAgICAgICAgICAgPjxkaXYgY2xhc3M9InRleHQtc3VidGl0bGUtMiI+5aSn5bCP6ZmQ5Yi277yaPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPHYtY2hpcCBsYWJlbCBjbGFzcz0ibWEtMiIKICAgICAgICAgICAgICAgICAgICAgID57eyBhY3RfaW5mby51cGxvYWQubWF4X3NpemUgfX0gTUI8L3YtY2hpcAogICAgICAgICAgICAgICAgICAgID48L3YtY29sCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHYtY29sCiAgICAgICAgICAgICAgICAgICAgPjxkaXYgY2xhc3M9InRleHQtc3VidGl0bGUtMiI+5LiK5Lyg5ZCO5piv5ZCm6YeN5paw5ZG95ZCN77yaPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPHYtY2hpcCBsYWJlbCBjbGFzcz0ibWEtMiI+e3sKICAgICAgICAgICAgICAgICAgICAgIGFjdF9pbmZvLnVwbG9hZC5yZW5hbWUKICAgICAgICAgICAgICAgICAgICB9fTwvdi1jaGlwPjwvdi1jb2wKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgICA8L3YtY2FyZD4KICAgICAgICAgICAgPCEtLSDkuIrkvKDorr7nva7nu5PmnZ8gLS0+CgogICAgICAgICAgICA8IS0tIOW8gOWQr+aXtumXtOmAieaLqSAtLT4KICAgICAgICAgICAgPHYtbWVudQogICAgICAgICAgICAgIHJlZj0iYmVnaW5fZGF0ZV9tZW51IgogICAgICAgICAgICAgIHYtbW9kZWw9ImRhdGVfdGltZV9tZW51LmJlZ2luX2RhdGVfbWVudSIKICAgICAgICAgICAgICA6Y2xvc2Utb24tY29udGVudC1jbGljaz0iZmFsc2UiCiAgICAgICAgICAgICAgOnJldHVybi12YWx1ZS5zeW5jPSJhY3RfaW5mby5iZWdpbl90aW1lLmQiCiAgICAgICAgICAgICAgdHJhbnNpdGlvbj0ic2NhbGUtdHJhbnNpdGlvbiIKICAgICAgICAgICAgICBvZmZzZXQteQogICAgICAgICAgICAgIG1pbi13aWR0aD0iYXV0byIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uLCBhdHRycyB9Ij4KICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGQKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iYWN0X2luZm8uYmVnaW5fdGltZS5kIgogICAgICAgICAgICAgICAgICBsYWJlbD0i6YCJ5oup5rS75Yqo6K6h5YiS5byA5ZCv5pel5pyfIgogICAgICAgICAgICAgICAgICBwcmVwZW5kLWljb249Im1kaS1jYWxlbmRhciIKICAgICAgICAgICAgICAgICAgcmVhZG9ubHkKICAgICAgICAgICAgICAgICAgdi1iaW5kPSJhdHRycyIKICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8di1kYXRlLXBpY2tlcgogICAgICAgICAgICAgICAgdi1tb2RlbD0iYWN0X2luZm8uYmVnaW5fdGltZS5kIgogICAgICAgICAgICAgICAgbm8tdGl0bGUKICAgICAgICAgICAgICAgIHNjcm9sbGFibGUKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICB0ZXh0CiAgICAgICAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgICAgICAgICBAY2xpY2s9ImRhdGVfdGltZV9tZW51LmJlZ2luX2RhdGVfbWVudSA9IGZhbHNlIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICBDYW5jZWwKICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgdGV4dAogICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgQGNsaWNrPSIkcmVmcy5iZWdpbl9kYXRlX21lbnUuc2F2ZShhY3RfaW5mby5iZWdpbl90aW1lLmQpIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICBPSwogICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICA8L3YtZGF0ZS1waWNrZXI+CiAgICAgICAgICAgIDwvdi1tZW51PgogICAgICAgICAgICA8di1tZW51CiAgICAgICAgICAgICAgcmVmPSJiZWdpbl90aW1lX21lbnUiCiAgICAgICAgICAgICAgdi1tb2RlbD0iZGF0ZV90aW1lX21lbnUuYmVnaW5fdGltZV9tZW51IgogICAgICAgICAgICAgIDpjbG9zZS1vbi1jb250ZW50LWNsaWNrPSJmYWxzZSIKICAgICAgICAgICAgICA6bnVkZ2UtcmlnaHQ9IjQwIgogICAgICAgICAgICAgIDpyZXR1cm4tdmFsdWUuc3luYz0iYWN0X2luZm8uYmVnaW5fdGltZS50IgogICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgb2Zmc2V0LXkKICAgICAgICAgICAgICBtYXgtd2lkdGg9IjI5MHB4IgogICAgICAgICAgICAgIG1pbi13aWR0aD0iMjkwcHgiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiwgYXR0cnMgfSI+CiAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImFjdF9pbmZvLmJlZ2luX3RpbWUudCIKICAgICAgICAgICAgICAgICAgbGFiZWw9Iua0u+WKqOiuoeWIkuW8gOWQr+aXtumXtCgyNOWwj+aXtuWItikiCiAgICAgICAgICAgICAgICAgIHByZXBlbmQtaWNvbj0ibWRpLWNsb2NrLXRpbWUtZm91ci1vdXRsaW5lIgogICAgICAgICAgICAgICAgICByZWFkb25seQogICAgICAgICAgICAgICAgICB2LWJpbmQ9ImF0dHJzIgogICAgICAgICAgICAgICAgICB2LW9uPSJvbiIKICAgICAgICAgICAgICAgID48L3YtdGV4dC1maWVsZD4KICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgIDx2LXRpbWUtcGlja2VyCiAgICAgICAgICAgICAgICB2LWlmPSJkYXRlX3RpbWVfbWVudS5iZWdpbl90aW1lX21lbnUiCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJhY3RfaW5mby5iZWdpbl90aW1lLnQiCiAgICAgICAgICAgICAgICBmb3JtYXQ9IjI0aHIiCiAgICAgICAgICAgICAgICBmdWxsLXdpZHRoCiAgICAgICAgICAgICAgICBAY2xpY2s6bWludXRlPSIkcmVmcy5iZWdpbl90aW1lX21lbnUuc2F2ZShhY3RfaW5mby5iZWdpbl90aW1lLnQpIgogICAgICAgICAgICAgID48L3YtdGltZS1waWNrZXI+CiAgICAgICAgICAgIDwvdi1tZW51PgogICAgICAgICAgICA8IS0tIOW8gOWQr+aXtumXtOmAieaLqSAtLT4KCiAgICAgICAgICAgIDwhLS0g57uT5p2f5pe26Ze06YCJ5oupIC0tPgogICAgICAgICAgICA8di1tZW51CiAgICAgICAgICAgICAgcmVmPSJlbmRfZGF0ZV9tZW51IgogICAgICAgICAgICAgIHYtbW9kZWw9ImRhdGVfdGltZV9tZW51LmVuZF9kYXRlX21lbnUiCiAgICAgICAgICAgICAgOmNsb3NlLW9uLWNvbnRlbnQtY2xpY2s9ImZhbHNlIgogICAgICAgICAgICAgIDpyZXR1cm4tdmFsdWUuc3luYz0iYWN0X2luZm8uZW5kX3RpbWUuZCIKICAgICAgICAgICAgICB0cmFuc2l0aW9uPSJzY2FsZS10cmFuc2l0aW9uIgogICAgICAgICAgICAgIG9mZnNldC15CiAgICAgICAgICAgICAgbWluLXdpZHRoPSJhdXRvIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iPgogICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJhY3RfaW5mby5lbmRfdGltZS5kIgogICAgICAgICAgICAgICAgICBsYWJlbD0i6YCJ5oup5rS75Yqo57uT5p2f5pel5pyfIgogICAgICAgICAgICAgICAgICBwcmVwZW5kLWljb249Im1kaS1jYWxlbmRhciIKICAgICAgICAgICAgICAgICAgcmVhZG9ubHkKICAgICAgICAgICAgICAgICAgdi1iaW5kPSJhdHRycyIKICAgICAgICAgICAgICAgICAgdi1vbj0ib24iCiAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8di1kYXRlLXBpY2tlcgogICAgICAgICAgICAgICAgdi1tb2RlbD0iYWN0X2luZm8uZW5kX3RpbWUuZCIKICAgICAgICAgICAgICAgIG5vLXRpdGxlCiAgICAgICAgICAgICAgICBzY3JvbGxhYmxlCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgdGV4dAogICAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgICAgQGNsaWNrPSJkYXRlX3RpbWVfbWVudS5lbmRfZGF0ZV9tZW51ID0gZmFsc2UiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIENhbmNlbAogICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICB0ZXh0CiAgICAgICAgICAgICAgICAgIGNvbG9yPSJwcmltYXJ5IgogICAgICAgICAgICAgICAgICBAY2xpY2s9IiRyZWZzLmVuZF9kYXRlX21lbnUuc2F2ZShhY3RfaW5mby5lbmRfdGltZS5kKSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgT0sKICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgPC92LWRhdGUtcGlja2VyPgogICAgICAgICAgICA8L3YtbWVudT4KICAgICAgICAgICAgPHYtbWVudQogICAgICAgICAgICAgIHJlZj0iZW5kX3RpbWVfbWVudSIKICAgICAgICAgICAgICB2LW1vZGVsPSJkYXRlX3RpbWVfbWVudS5lbmRfdGltZV9tZW51IgogICAgICAgICAgICAgIDpjbG9zZS1vbi1jb250ZW50LWNsaWNrPSJmYWxzZSIKICAgICAgICAgICAgICA6bnVkZ2UtcmlnaHQ9IjQwIgogICAgICAgICAgICAgIDpyZXR1cm4tdmFsdWUuc3luYz0iYWN0X2luZm8uZW5kX3RpbWUudCIKICAgICAgICAgICAgICB0cmFuc2l0aW9uPSJzY2FsZS10cmFuc2l0aW9uIgogICAgICAgICAgICAgIG9mZnNldC15CiAgICAgICAgICAgICAgbWF4LXdpZHRoPSIyOTBweCIKICAgICAgICAgICAgICBtaW4td2lkdGg9IjI5MHB4IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24sIGF0dHJzIH0iPgogICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJhY3RfaW5mby5lbmRfdGltZS50IgogICAgICAgICAgICAgICAgICBsYWJlbD0i5rS75Yqo57uT5p2f5pe26Ze0KDI05bCP5pe25Yi2KSIKICAgICAgICAgICAgICAgICAgcHJlcGVuZC1pY29uPSJtZGktY2xvY2stdGltZS1mb3VyLW91dGxpbmUiCiAgICAgICAgICAgICAgICAgIHJlYWRvbmx5CiAgICAgICAgICAgICAgICAgIHYtYmluZD0iYXR0cnMiCiAgICAgICAgICAgICAgICAgIHYtb249Im9uIgogICAgICAgICAgICAgICAgPjwvdi10ZXh0LWZpZWxkPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgPHYtdGltZS1waWNrZXIKICAgICAgICAgICAgICAgIHYtaWY9ImRhdGVfdGltZV9tZW51LmVuZF90aW1lX21lbnUiCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJhY3RfaW5mby5lbmRfdGltZS50IgogICAgICAgICAgICAgICAgZm9ybWF0PSIyNGhyIgogICAgICAgICAgICAgICAgZnVsbC13aWR0aAogICAgICAgICAgICAgICAgQGNsaWNrOm1pbnV0ZT0iJHJlZnMuZW5kX3RpbWVfbWVudS5zYXZlKGFjdF9pbmZvLmVuZF90aW1lLnQpIgogICAgICAgICAgICAgID48L3YtdGltZS1waWNrZXI+CiAgICAgICAgICAgIDwvdi1tZW51PgogICAgICAgICAgICA8IS0tIOe7k+adn+aXtumXtOmAieaLqSAtLT4KCiAgICAgICAgICAgIDxzbWFsbD7lrozmiJDnvJbovpHlkI7orrDlvpfngrnlh7vlj7PkuIrop5LnmoTigJzkv53lrZjigJ3mjInpkq48L3NtYWxsPgogICAgICAgICAgPC92LWNvbnRhaW5lcj4KICAgICAgICAgIDwhLS0g57uT5p2f5pe26Ze06YCJ5oupIC0tPgoKICAgICAgICAgIDwhLS0g57yW6L6R5Yy657uT5p2fIC0tPgogICAgICAgIDwvdi1jYXJkPgogICAgICA8L3YtZGlhbG9nPgoKICAgICAgPCEtLSDmtLvliqjnu5/orqHmlbDmja4gc3RzX2RpYWxvZyAtLT4KICAgICAgPHYtZGlhbG9nCiAgICAgICAgdi1tb2RlbD0ic3RzX2RpYWxvZyIKICAgICAgICBmdWxsc2NyZWVuCiAgICAgICAgaGlkZS1vdmVybGF5CiAgICAgICAgdHJhbnNpdGlvbj0iZGlhbG9nLWJvdHRvbS10cmFuc2l0aW9uIgogICAgICA+CiAgICAgICAgPHYtY2FyZD4KICAgICAgICAgIDx2LXRvb2xiYXIgZGFyayBjb2xvcj0iaW5mbyI+CiAgICAgICAgICAgIDx2LWJ0biBpY29uIGRhcmsgQGNsaWNrPSJzdHNfZGlhbG9nID0gZmFsc2UiPgogICAgICAgICAgICAgIDx2LWljb24+bWRpLWNsb3NlPC92LWljb24+CiAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgIDx2LXRvb2xiYXItdGl0bGU+5rS75Yqo57uf6K6h5pWw5o2uPC92LXRvb2xiYXItdGl0bGU+CiAgICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgogICAgICAgICAgPC92LXRvb2xiYXI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJwYS00Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jYXB0aW9uIj7mlbDmja7nu5/orqHliLfmlrDlrZjlnKgwfjEwc+W7tui/n+OAgjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNhcHRpb24iIHYtaWY9ImV4cG9ydF9kYXRhLmFjdF9pZCAhPSAwIj4KICAgICAgICAgICAgICDlvZPliY3mtLvliqjlt7LlvIDlkK/mlofku7bkuIrkvKDlip/og73jgII8YnIgLz7ngrnlh7vigJzlt7LlrozmiJDigJ3nlKjmiLfliJfooajpobnlj6/mn6XnnIvnlKjmiLfkuIrkvKDnmoTmlofku7bjgII8YnIgLz7ngrnlh7vigJzlr7zlh7rmiYDmnInmlofku7bigJ3lj6/lsIbnlKjmiLfkuIrkvKDnmoTmlofku7bmiZPljIXkuIvovb3jgIIKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDx2LWNhcmQgY2xhc3M9Im1hLTIiPgogICAgICAgICAgICA8di1jYXJkLXRleHQgdi1pZj0iZXhwb3J0X2RhdGEuYWN0X2lkICE9IDAiPgogICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgZGVwcmVzc2VkCiAgICAgICAgICAgICAgICBAY2xpY2s9ImV4cG9ydF9maWxlIgogICAgICAgICAgICAgICAgdi1pZj0iZXhwb3J0X2RhdGEudXJsID09ICcnIgogICAgICAgICAgICAgICAgOmxvYWRpbmc9ImV4cG9ydF9kYXRhLmxvYWRpbmciCiAgICAgICAgICAgICAgICBjbGFzcz0ibWEtMyIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICDlr7zlh7rmiYDmnInmlofku7YKICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgZGVwcmVzc2VkCiAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgICAgICAgOmhyZWY9ImV4cG9ydF9kYXRhLnVybCIKICAgICAgICAgICAgICAgIHYtaWY9ImV4cG9ydF9kYXRhLnVybCAhPSAnJyIKICAgICAgICAgICAgICAgIGNsYXNzPSJtYS0zIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIOS4i+i9vQogICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgPHNtYWxsIHYtaWY9ImV4cG9ydF9kYXRhLnVybCAhPSAnJyIKICAgICAgICAgICAgICAgID7kuIvovb3pk77mjqXmnInmlYjmnJ/kuLo15YiG6ZKf44CCPC9zbWFsbAogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgPHYtbGlzdCBkZW5zZSBjbGFzcz0icGEtMiI+CiAgICAgICAgICAgICAgPHYtc3ViaGVhZGVyPuacquWujOaIkDwvdi1zdWJoZWFkZXI+CiAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLWdyb3VwIGNvbG9yPSJwcmltYXJ5Ij4KICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGkpIGluIHN0cy51bmZpbmlzaGVkX2xpc3QiCiAgICAgICAgICAgICAgICAgIDprZXk9ImkiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS1pY29uPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24gdi10ZXh0PSJpdGVtLmlkIj48L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1pY29uPgogICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tY29udGVudD4KICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUKICAgICAgICAgICAgICAgICAgICAgID57eyBpdGVtLnVzZXJfbmFtZSB9fSAoVUlEOnt7CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udXNlcl9pZAogICAgICAgICAgICAgICAgICAgICAgfX0pPC92LWxpc3QtaXRlbS10aXRsZQogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1jb250ZW50PgogICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLWdyb3VwPgoKICAgICAgICAgICAgICA8di1kaXZpZGVyPjwvdi1kaXZpZGVyPgoKICAgICAgICAgICAgICA8di1zdWJoZWFkZXI+5bey5a6M5oiQPC92LXN1YmhlYWRlcj4KCiAgICAgICAgICAgICAgPCEtLSDml6Dmlofku7YgLS0+CiAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLWdyb3VwCiAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgIHYtaWY9ImV4cG9ydF9kYXRhLmFjdF9pZCA9PSAwIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbSB2LWZvcj0iKGl0ZW0sIGkpIGluIHN0cy5maW5pc2hlZF9saXN0IiA6a2V5PSJpIj4KICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLWljb24+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiB2LXRleHQ9Iml0ZW0uaWQiPjwvdi1pY29uPgogICAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLWljb24+CiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS1jb250ZW50PgogICAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZQogICAgICAgICAgICAgICAgICAgICAgPnt7IGl0ZW0udXNlcl9uYW1lIH19IChVSUQ6e3sKICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS51c2VyX2lkCiAgICAgICAgICAgICAgICAgICAgICB9fSk8L3YtbGlzdC1pdGVtLXRpdGxlCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS1zdWJ0aXRsZQogICAgICAgICAgICAgICAgICAgICAgPuWujOaIkOaXtumXtDp7eyBpdGVtLmRhdGVfdGltZSB9fTwvdi1saXN0LWl0ZW0tc3VidGl0bGUKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0tY29udGVudD4KICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1ncm91cD4KICAgICAgICAgICAgICA8IS0tIOaXoOaWh+S7tiAtLT4KCiAgICAgICAgICAgICAgPCEtLSDmnInmlofku7bpooTop4ggLS0+CiAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLWdyb3VwCiAgICAgICAgICAgICAgICBjb2xvcj0icHJpbWFyeSIKICAgICAgICAgICAgICAgIHYtaWY9ImV4cG9ydF9kYXRhLmFjdF9pZCAhPSAwIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgICAgICB2LWZvcj0iKGl0ZW0sIGkpIGluIHN0cy5maW5pc2hlZF9saXN0IgogICAgICAgICAgICAgICAgICA6a2V5PSJpIgogICAgICAgICAgICAgICAgICBAY2xpY2s9ImdldF9maWxlX3ByZXZpZXcoaXRlbSkiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS1pY29uPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24gdi10ZXh0PSJpdGVtLmlkIj48L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1pY29uPgogICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tY29udGVudD4KICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGUKICAgICAgICAgICAgICAgICAgICAgID57eyBpdGVtLnVzZXJfbmFtZSB9fSAoVUlEOnt7CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udXNlcl9pZAogICAgICAgICAgICAgICAgICAgICAgfX0pPC92LWxpc3QtaXRlbS10aXRsZQogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tc3VidGl0bGUKICAgICAgICAgICAgICAgICAgICAgID7lrozmiJDml7bpl7Q6e3sgaXRlbS5kYXRlX3RpbWUgfX0mbmJzcDs8di1pY29uIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgICAgID5tZGktY2xvdWQtY2hlY2stb3V0bGluZTwvdi1pY29uCiAgICAgICAgICAgICAgICAgICAgICA+PC92LWxpc3QtaXRlbS1zdWJ0aXRsZQogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbS1jb250ZW50PgogICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtLWdyb3VwPgogICAgICAgICAgICAgIDwhLS0g5pyJ5paH5Lu26aKE6KeIIC0tPgogICAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgIDwvdi1jYXJkPgogICAgICAgIDwvdi1jYXJkPgogICAgICA8L3YtZGlhbG9nPgoKICAgICAgPCEtLSDnlKjmiLfnrqHnkIYgdXNlcl9kaWFsb2cgLS0+CiAgICAgIDx2LWRpYWxvZwogICAgICAgIHYtbW9kZWw9InVzZXJfZGlhbG9nIgogICAgICAgIGZ1bGxzY3JlZW4KICAgICAgICBoaWRlLW92ZXJsYXkKICAgICAgICB0cmFuc2l0aW9uPSJkaWFsb2ctYm90dG9tLXRyYW5zaXRpb24iCiAgICAgID4KICAgICAgICA8di1jYXJkIGNsYXNzPSJwYS00Ij4KICAgICAgICAgIDx2LXRvb2xiYXIgZGFyayBjb2xvcj0iaW5mbyI+CiAgICAgICAgICAgIDx2LWJ0biBpY29uIGRhcmsgQGNsaWNrPSJ1c2VyX2RpYWxvZyA9IGZhbHNlIj4KICAgICAgICAgICAgICA8di1pY29uPm1kaS1jbG9zZTwvdi1pY29uPgogICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICA8di10b29sYmFyLXRpdGxlPuePree6p+aIkOWRmOeuoeeQhjwvdi10b29sYmFyLXRpdGxlPgogICAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICAgICAgICAgICAgPHYtYnRuIEBjbGljaz0iZ2V0X3VzZXJfbGlzdCIgZGFyayBpY29uCiAgICAgICAgICAgICAgPjx2LWljb24+bWRpLXJlZnJlc2g8L3YtaWNvbj48L3YtYnRuCiAgICAgICAgICAgID4KICAgICAgICAgIDwvdi10b29sYmFyPgoKICAgICAgICAgIDx2LWNhcmQtdGV4dD4KICAgICAgICAgICAgPHYtYWxlcnQgc2hhcGVkIHR5cGU9ImluZm8iIGNsYXNzPSJteC1hdXRvIG1hLTQiPgogICAgICAgICAgICAgIOOAkOi4ouWHuuePree6p+OAkTrngrnlh7vmjInpkq7lkI7vvIzlsIbnq4vljbPmuIXpmaTnlKjmiLfnmoTnrb7liLDorrDlvZXlj4rkuIrkvKDnmoTmlofku7bvvIzorrDlvZXml6Dms5XmgaLlpI3jgILnlKjmiLflsIbph43mlrDlm57liLDigJzliJ3lp4vljJbigJ3pmLbmrrXjgILosKjmhY7mk43kvZzvvIE8YnIgLz4KICAgICAgICAgICAgICDjgJDorr7kuLov5pKk6ZSA566h55CG5ZGY44CROiDmk43kvZzmiJDlip/lkI7or6XnlKjmiLfpnIDopoHph43mlrDnmbvlvZXmiY3og73nlJ/mlYjjgIIKICAgICAgICAgICAgPC92LWFsZXJ0PgogICAgICAgICAgICA8di1jYXJkIGNsYXNzPSJteC1hdXRvIG1hLTQiPgogICAgICAgICAgICAgIDx2LWNhcmQtdGl0bGU+CiAgICAgICAgICAgICAgICDmiYDmnInnj63nuqfmiJDlkZgKICAgICAgICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgogICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZAogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJ1c2VybGlzdF9zZWFyY2giCiAgICAgICAgICAgICAgICAgIGFwcGVuZC1pY29uPSJtZGktbWFnbmlmeSIKICAgICAgICAgICAgICAgICAgbGFiZWw9IuaQnOe0oiIKICAgICAgICAgICAgICAgICAgc2luZ2xlLWxpbmUKICAgICAgICAgICAgICAgICAgaGlkZS1kZXRhaWxzCiAgICAgICAgICAgICAgICA+PC92LXRleHQtZmllbGQ+CiAgICAgICAgICAgICAgPC92LWNhcmQtdGl0bGU+CiAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0PgogICAgICAgICAgICAgICAgPHYtZGF0YS10YWJsZQogICAgICAgICAgICAgICAgICA6aGVhZGVycz0idXNlcmxpc3RfaGVhZGVycyIKICAgICAgICAgICAgICAgICAgOml0ZW1zPSJ1c2VyX2xpc3QiCiAgICAgICAgICAgICAgICAgIDpzZWFyY2g9InVzZXJsaXN0X3NlYXJjaCIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpbYGl0ZW0uaXNfYWRtaW5gXT0ieyBpdGVtIH0iPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24gdi1pZj0iaXRlbS5hZG1pbiA9PSAxIiBjb2xvcj0icHVycGxlIgogICAgICAgICAgICAgICAgICAgICAgPm1kaS1jaGVjay1jaXJjbGUtb3V0bGluZTwvdi1pY29uCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24gdi1pZj0iaXRlbS5hZG1pbiA9PSAwIgogICAgICAgICAgICAgICAgICAgICAgPm1kaS1jbG9zZS1jaXJjbGUtb3V0bGluZTwvdi1pY29uCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OltgaXRlbS5hY3Rpb25zYF09InsgaXRlbSB9Ij4KICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgIGRlcHJlc3NlZAogICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtYS0yIgogICAgICAgICAgICAgICAgICAgICAgdi1pZj0iaXRlbS5hZG1pbiA9PSAwIgogICAgICAgICAgICAgICAgICAgICAgY29sb3I9InByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InNldF9hZG1pbihpdGVtLCAxKSIKICAgICAgICAgICAgICAgICAgICAgID7orr7kuLrnrqHnkIblkZg8L3YtYnRuCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgZGVwcmVzc2VkCiAgICAgICAgICAgICAgICAgICAgICBzbWFsbAogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1hLTIiCiAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJpdGVtLmFkbWluID09IDEiCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InNldF9hZG1pbihpdGVtLCAwKSIKICAgICAgICAgICAgICAgICAgICAgID7mkqTplIDnrqHnkIblkZg8L3YtYnRuCiAgICAgICAgICAgICAgICAgICAgPgoKICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgIGRlcHJlc3NlZAogICAgICAgICAgICAgICAgICAgICAgc21hbGwKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtYS0yIgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJjb25maXJuX2RlbGV0ZShpdGVtKSIKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJlcnJvciIKICAgICAgICAgICAgICAgICAgICAgID7ouKLlh7rnj63nuqc8L3YtYnRuCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgPC92LWRhdGEtdGFibGU+CiAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD4KICAgICAgICAgICAgPC92LWNhcmQ+CiAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgIDwvdi1jYXJkPgogICAgICA8L3YtZGlhbG9nPgoKICAgICAgPCEtLSDliKDpmaTnlKjmiLcgZGlhbG9nRGVsZXRlIC0tPgogICAgICA8di1kaWFsb2cgdi1tb2RlbD0iZGlhbG9nRGVsZXRlLm9wZW4iIG1heC13aWR0aD0iNTAwcHgiPgogICAgICAgIDx2LWNhcmQ+CiAgICAgICAgICA8di1jYXJkLXRpdGxlIGNsYXNzPSJ0ZXh0LWg1Ij7noa7lrpropoHliKDpmaTor6XnlKjmiLc/PC92LWNhcmQtdGl0bGU+CiAgICAgICAgICA8di1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgogICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICBjb2xvcj0iYmx1ZSBkYXJrZW4tMSIKICAgICAgICAgICAgICB0ZXh0CiAgICAgICAgICAgICAgQGNsaWNrPSJkaWFsb2dEZWxldGUub3BlbiA9IGZhbHNlIgogICAgICAgICAgICAgID7lj5bmtog8L3YtYnRuCiAgICAgICAgICAgID4KICAgICAgICAgICAgPHYtYnRuIGNvbG9yPSJibHVlIGRhcmtlbi0xIiB0ZXh0IEBjbGljaz0ib3BfdXNlciI+T0s8L3YtYnRuPgogICAgICAgICAgPC92LWNhcmQtYWN0aW9ucz4KICAgICAgICA8L3YtY2FyZD4KICAgICAgPC92LWRpYWxvZz4KCiAgICAgIDwhLS0g5paH5Lu26aKE6KeIIC0tPgogICAgICA8di1kaWFsb2cKICAgICAgICB2LW1vZGVsPSJ1cGxvYWRfcHJldmlldy5vcGVuIgogICAgICAgIG1heC13aWR0aD0iNTAwcHgiCiAgICAgICAgdi1pZj0idXBsb2FkX3ByZXZpZXcub3BlbiA9PSB0cnVlIgogICAgICA+CiAgICAgICAgPHYtY2FyZD4KICAgICAgICAgIDx2LWNhcmQtdGl0bGUgY2xhc3M9InRleHQtaDUiPueUqOaIt+aWh+S7tumihOiniDwvdi1jYXJkLXRpdGxlPgogICAgICAgICAgPHYtY2FyZC10ZXh0IHYtaWY9InVwbG9hZF9wcmV2aWV3Lml0ZW0udHlwZSA9PSAnaW1hZ2UnIj4KICAgICAgICAgICAgPCEtLSDlm77niYflsZXnpLogLS0+CiAgICAgICAgICAgIDx2LWltZwogICAgICAgICAgICAgIG1heC13aWR0aD0iNDAwIgogICAgICAgICAgICAgIGNsYXNzPSJtYS1hdXRvIgogICAgICAgICAgICAgIDpzcmM9InVwbG9hZF9wcmV2aWV3Lml0ZW0uaW1nX3VybCIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6cGxhY2Vob2xkZXI+CiAgICAgICAgICAgICAgICA8di1yb3cKICAgICAgICAgICAgICAgICAgY2xhc3M9ImZpbGwtaGVpZ2h0IG1hLTAiCiAgICAgICAgICAgICAgICAgIGFsaWduPSJjZW50ZXIiCiAgICAgICAgICAgICAgICAgIGp1c3RpZnk9ImNlbnRlciIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHYtcHJvZ3Jlc3MtY2lyY3VsYXIKICAgICAgICAgICAgICAgICAgICBpbmRldGVybWluYXRlCiAgICAgICAgICAgICAgICAgICAgY29sb3I9ImJsdWUiCiAgICAgICAgICAgICAgICAgID48L3YtcHJvZ3Jlc3MtY2lyY3VsYXI+CiAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgIDwvdi1pbWc+CiAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgPHYtY2FyZC10ZXh0IHYtaWY9InVwbG9hZF9wcmV2aWV3Lml0ZW0udHlwZSA9PSAnb3RoZXInIj4KICAgICAgICAgICAgPCEtLSDkuIvovb0gLS0+CiAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgIGRlcHJlc3NlZAogICAgICAgICAgICAgIDpocmVmPSJ1cGxvYWRfcHJldmlldy5pdGVtLmRvd25sb2FkX3VybCIKICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgICAgICA+5LiL6L29PC92LWJ0bgogICAgICAgICAgICA+CiAgICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgPHYtY2FyZC10ZXh0PiDlm77niYcv5paH5Lu25LiL6L295Li05pe25Zyw5Z2A5pyJ5pWI5pyf5Li6NeWIhumSn+OAgiA8L3YtY2FyZC10ZXh0PgogICAgICAgICAgPHYtY2FyZC1hY3Rpb25zPgogICAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgY29sb3I9ImJsdWUgZGFya2VuLTEiCiAgICAgICAgICAgICAgdGV4dAogICAgICAgICAgICAgIEBjbGljaz0idXBsb2FkX3ByZXZpZXcub3BlbiA9IGZhbHNlIgogICAgICAgICAgICAgIHJpZ2h0CiAgICAgICAgICAgICAgPuWFs+mXrTwvdi1idG4KICAgICAgICAgICAgPgogICAgICAgICAgPC92LWNhcmQtYWN0aW9ucz4KICAgICAgICA8L3YtY2FyZD4KICAgICAgPC92LWRpYWxvZz4KICAgIDwvdi1tYWluPgogIDwvdi1hcHA+CjwvZGl2Pgo="},null]}